＜MVCモデル＞
サーブレットクラスもJSPもどちらも同じ処理を行うことが可能。
しかし、どちらか一方のみ利用して開発を行うのは良くないとされている。

理由：一方のみでやろうとすると、画面表示と処理がごちゃごちゃになり、混乱しやすくなる。

Webアプリケーションを開発する際の模範的な構造のことをMVCモデルといい、
これに沿ってアプリケーションの開発を行うことが良いとされている。

MVCモデルとは、アプリケーションをModel, View, Controller の3つの要素に分けて開発することを定めている。
各要素には担当が決められており、他の要素の役割は担がない。

　　要素　　　　　　　　　　　　　　　　　役割
Model(モデル)　　　　　　   アプリケーションの主たる処理やデータの格納などを行う。
　　　　　　　　　　　　    サーブレットクラスではない一般のJavaクラスが該当する。

View(ビュー)                ユーザに対して画面の表示を行う。
                            JSPファイルが該当する。

Controller(コントローラー)  ユーザからの要求を受取、処理の実行をモデルに依頼し、その結果の表示をビューに依頼する。
                            サーブレットクラスが該当する。

MVCモデルを利用することで変化に強いプログラムを作ることが可能。
例えばUI(デザイン)を全て変えることなった場合、変更する箇所は基本的にはビューのみとなる。
モデルは仕様が変わらない限り変わらない。
仕様もモデルはデータ管理するだけなのでそうそう変わらない。
コントローラーも大幅に変える必要はない。

また、それぞれの機能を独立させることによって分業がしやすくなる。

実際の開発だと、検索処理や計算などはプログラマが担当。
見た目のHTMLの部分はデザイナーに依頼するといったことがよくある。
その際にデザイナーは表示を実装するビューを編集することになるが、
ここに複雑な計算のプログラムがたくさん記述してあったら一体どこをどう直してよいのかがわからなくなってしまう。
計算等のロジックに当たる部分は、モデル側に記述しておけばビューはシンプルになり可読性が大幅に上がる。
つまり、分業することによって、作業効率が上昇し、速やかに作業を進められる。

＜フォワード＞
MVCモデルを実現するためには、サーブレットクラスからJSPファイルを利用する必要があり、
このときに使用するのがフォワードである。
フォワードを使用すると、処理を他のサーブレットクラスやJSPファイルに移すことが可能。

これにより、出力処理をサーブレットクラスではなくViewであるJSPファイルに任せることができる。

フォワードはRequestDispatcherインスタンスのforward()メソッドで行う。

例）RequestDispatcher dispatcher = request.getRequestDispatcher("フォワード先");
dispatcher.forward(request, response); 

フォワード先には、JSPファイルだけではなくサーブレットクラスを指定することも可能。

＜リダイレクト＞
サーブレットから別のページに移動する方法として、もう一つ、リダイレクトという方法がある。

リダイレクトは、指定されたURLにGETアクセスすることができ、
また、そのURLに直接アクセスすることになるので表示されるURLも変わる。

リダイレクトは遷移先のURLを指定のものに変えたいとき、外部のリンクに移動させたいときに使われる。

リダイレクトは、フォワードとは異なりリクエストスコープに値を渡せない点に注意が必要。

<スコープ＞
インスタンスを保存できる領域であり、サーブレットクラスとＪＳＰ間でインスタンスを共有できる
種類によってインスタンスの有効期限が異なる


・リクエストスコープ
一つのページ内で完結できるときに使われる。
・検索サイト（YahooやBiglobeなど）
・ホームページ（誰でも閲覧できるもの）

・セッションスコープ
情報が他のページでも必要とされる場合の時に使われる。
使い方
・会員情報サイト。ログインしないと使えないもの。（楽天、マイナビなど）

★スコープのルール
基本はJavaBeansクラスのインスタンスを保存する。

＊Javabeensクラス作成のルール
1. java.io.Serializable を実装している
2.クラスは public でパッケージに所属する。
3.publicで引数のないコンストラクタを持つ
4.フィールドはカプセル化されている
5.命名規則に従ったgetter/setterを持つ
・getterはgetから始め、以降単語の先頭の文字は大文字にする。(booleanの場合のみisから始める)
　引数はなし、戻り値はフィールド。
・setterはsetから始め、以降の単語の先頭の文字は大文字にする。
　引数は1つでフィールドに設定する値を受け取る。戻り値はなし。

EL式
プロパティの呼び出しを簡略化して記述することが可能。
「属性.プロバティ」と入力すると、getterが自動で実行される。
ＪＳＰのみ可能。
