●＜サーブレットとは＞
Javaを使ってサーバサイドプログラムを作るための技術。
サーブレットの文法に従い、「サーブレットクラス」というクラスを開発することで、
アプリケーションサーバ上で実行することが可能。

★サーブレットクラスのルール

1.javax.servlet.http.HttpServlet クラスを継承する
2.doGet(), doPost()メソッドをオーバーライドして使う
3.サーブレット関係のクラスをインポートする

★サーブレットの作成（Eclipse）
1.プロジェクト・エクスプローラー内で右クリック→新規→サーブレットを選択
2.クラス名を入力

以上を行うと、javaリソースのsrc配下にに先程の3つのルールを踏襲した「サーブレットクラス」が作成

★リクエストの送り方

GET・・・・リクエストとして送信されるデータはURLに含まれる。
主に、ページの取得や検索結果の表示など、URLに直接アクセスしてデータを取得する場合

POST・・・・リクエストとして送信されるデータはメッセージボディ部に含まれる。
主に、入力フォームを使ってユーザ登録するなど、フォームを使ってデータを登録、更新する場合

・サーブレットで実行されるメソッド
GET→doGet（）、POST→doPost（）

●＜JSPとは＞
サーブレットと同じサーバサイドプログラムの技術。サーブレットの代わりにJSPファイルを使用する。
JSPファイルは、リクエストされるとサーブレットクラスに変換されるため、
サーブレットクラスでできることはJSPファイルでも行うことが可能。

・JSPはHTMLの中にJavaのコードを埋め込んで作成。
・サーブレットクラスに比べて楽にHTMLを出力することが可能。

★JSPの構成要素
HTMLとJavaコードで構成。
HTMLの部分をテンプレート、Javaコードの部分をスクリプトと呼ぶ。

・スクリプトレット
JSPファイルにJavaコードを埋め込める。
<%Javaコード%>

・スクリプト式
変数やメソッドの戻り値を出力。JavaのSystem.out.println()メソッドと同様に値を出力するために使用。
<%= Javaのコード %>

・コメント
JSPファイルにコメントを入れることが可能。※スクリプトレットの中では使用不可。
<%-- コメント --%>

・pageディレクティブ
JSPに関する様々な設定を行うことが可能。
<%@ page 属性名="値" %>

＊属性の種類
 属性名　　　　　　　                    設定内容　　　　　　                デフォルト値
[contentType,]     レスポンスのContent-Typeヘッダ,                   text/html; charset=ISO-8859-1,
[import,]          インポートするクラスまたはインターフェース,       java.lang.*
                                                                     javax.servlet.*
                                                                     javax.servlet.jsp.
                                                                     javax.servlet.http.*
pageEncoding,    JSPファイルの文字コード,                            ISO-8859-1
language         使用する言語                                        Java
session          セッション使用の可否                                TRUE
errorPage        キャッチされなかった例外の処理                      null
isErrorPage      エラーページかどうかの判断                          FALSE

contectTypeとimportはよく使われる。
例）<%@ page contentType="text/html; charset=UTF-8" %>

★JSPの作成（Eclipse）
1.プロジェクト・エクスプローラー内で右クリック→新規→JSPを選択
2.ファイル名を入力。

●＜フォームの部品＞
一般的なWebシステムでは、ユーザの入力に対応して処理をする仕組み。
Webアプリケーションではフォームでそれを実現する。

・テキストボックス
1行のテキストを入力できる部品。入力したテキストの値が送信される。
<input type="text" name="名前">

・ラジオボタン
選択肢のグループの中から、1つだけを選択する部品。name属性の値が同じものが、同じ選択肢のグループになる。
<input type="radio" name="名前" value="値">

・送信ボタン
クリックするとフォームに入力した内容を送信するボタンとなる部品。value属性の値がボタンに表示される文字になる。
<input type="submit" value="送信">

・非表示データ
hiddenは画面上には表示しないでサーブレットに値を渡したい場合に利用。
<input type="hidden" value="値">

例）掲示板などで投稿と一緒に投稿した時間も取得したい場合
<input type="hidden" value="<%= System.currentTimeMillis() %>">

※System.currentTimeMillis()は「ミリ秒で表される現在の時間を返す」メソッド。
JSPに記載したJavaのコードはサーブレットに送られる際にコンパイルされるので、
送信フォームを選択したタイミングの時間を取得することが可能。

また、入力した内容を確認する確認画面を作成するときにも、このhidden項目が使われる。

＜フォームの記述方法＞
フォームの部品は、全てフォームタグの中に記述する。

<form action="送信先" method="リクエストメソッド">・・・</form>

action属性には、送信先となるサーバサイドプログラム(サーブレットクラスまたはJSPファイル)を指定。
method属性には、GETまたはPOSTを指定。送信リクエストをGETリクエストにするかPOSTリクエストにするかを決める。

フォームの送信ボタンをクリックすると、フォームの部品に入力したデータは「部品名 = 値」の形式で送信される。
これをリクエストパラメータという。

★GETとPOSTの使い分け

・GETリクエスト・・・リクエストパラメータが、情報を取得するために利用される場合(例：検索)
　　　　　　　　　　 GETリクエストの場合、パラメータをURLの後に付与して送信する。「例：http://example?title=abc」

・POSTリクエスト・・ リクエストパラメータが、情報の登録に利用される場合(例：ユーザ登録、掲示板の投稿)
 　　　　　　　　　　POSTリクエストの場合、URLはそのまま。




